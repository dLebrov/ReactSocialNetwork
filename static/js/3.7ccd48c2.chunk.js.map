{"version":3,"sources":["components/profile/profileinfo/profileinfo.module.css","components/profile/profileinfo/profileStatus/profileStatus.module.css","components/profile/MyPosts/MyPosts.module.css","components/profile/MyPosts/post/Post.module.css","components/profile/profileinfo/profileStatus/ProfileStatusWithHooks.js","components/profile/profileinfo/ProfileDataForm.jsx","components/profile/profileinfo/profileinfo.jsx","components/profile/MyPosts/post/Post.jsx","components/profile/MyPosts/MyPosts.jsx","components/profile/MyPosts/MyPostsContainer.jsx","components/profile/profile.jsx","components/profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","span","onClick","input","onChange","e","currentTarget","value","autoFocus","onKeyPress","enter","charCode","updateStatus","button","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","des","createField","Input","type","Object","keys","profile","contacts","map","key","error","style","formSummaryError","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","isOwner","goToEditMode","Contact","ProfileInfo","all","description","document","getElementById","click","logo","id","src","photos","large","user","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","item","img","alt","message","href","like","MyPosts","React","memo","createRef","postsElement","post","p","MyPost","MyPostReduxForm","values","addPost","newPostText","maxLength","maxLengthCreator","Field","validate","required","placeholder","component","Textarea","name","textarea","compose","connect","state","profilePage","posts","dispatch","addPostActionCreator","Profile","setProfile","loading","setLoading","me","useSelector","auth","userId","match","params","checker","MyPostsContainer","ProfileContainer","this","AuthUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.7ccd48c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"profileinfo_logo__-ZLd5\",\"all\":\"profileinfo_all__3lvx_\",\"description\":\"profileinfo_description__1PNCC\",\"input\":\"profileinfo_input__2ROkp\",\"des\":\"profileinfo_des__2mgho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"profileStatus_input__D2zhv\",\"button\":\"profileStatus_button__2EhDJ\",\"span\":\"profileStatus_span__1W3d1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"click\":\"MyPosts_click__3vyjv\",\"textarea\":\"MyPosts_textarea__3juEw\",\"MyPost\":\"MyPosts_MyPost__1796P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Post_img__KNO_M\",\"button\":\"Post_button__3sSYo\",\"item\":\"Post_item__1jdmn\"};","import React, {useEffect, useState} from 'react';\r\nimport s from './profileStatus.module.css';\r\nimport Preloader from \"../../../common/preloader/preloader\";\r\nimport user from '../../../img/user.png'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)} , [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus (status)\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n\r\n    };\r\n\r\n    const deactivateEditModeEnter = (enter) => {\r\n        if (enter.charCode === 13){\r\n            setEditMode(false);\r\n            props.updateStatus (status)\r\n        }\r\n    };\r\n\r\n    /*componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }*/\r\n\r\n    return (\r\n        <div>\r\n\r\n            { !editMode &&\r\n            <div>\r\n                <span className={s.span} onClick={activateEditMode} >{\"Статус: \" + props.status}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                Статус:\r\n                <input className={s.input} onChange={onStatusChange} autoFocus={true} onKeyPress={deactivateEditModeEnter} value={status}/>\r\n                <button className={s.button} onClick={deactivateEditMode} >Сохранить</button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./../profileinfo/profileinfo.module.css\";\r\nimport {createField, Input} from \"../../common/FromsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FromsControls/FormsControls.module.css\";\r\n\r\n\r\nconst ProfileDataForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.des}>\r\n                <div>Имя:  {createField(\"Имя\", \"fullName\", [], Input)}</div>\r\n                <div>\r\n                    Работа: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n                </div>\r\n                <div>\r\n                    Мои скиллы: {createField(\"о работе\", \"lookingForAJobDescription\", [], Input)}\r\n                </div>\r\n                <div>\r\n                    Обо мне: {createField(\"Обо мне\", \"aboutMe\", [], Input)}\r\n                </div>\r\n                <div>\r\n                    Контакты: {(Object.keys(props.profile.contacts).map(key => {\r\n                    return <div>\r\n                        {createField(key, \"contacts.\" + key, [], Input)}\r\n                    </div>\r\n                }))}\r\n                </div>\r\n                {props.error && <div className={style.formSummaryError}>\r\n                    {props.error}\r\n                </div>}\r\n                <button>Сохранить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;","import React, {useState} from 'react';\r\nimport s from './profileinfo.module.css';\r\nimport Preloader from \"../../common/preloader/preloader\";\r\nimport user from '../../img/user.png'\r\nimport ProfileStatusWithHooks from \"./profileStatus/ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then (() => {\r\n            setEditMode(false);\r\n        })\r\n\r\n    };\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    function pro1() {\r\n            props.isOwner && document.getElementById(\"file\").click();\r\n    }\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.all}>\r\n                <div>\r\n                    <div className={s.description}>\r\n                        <img onClick={pro1} className={s.logo} id=\"image\"\r\n                             src={props.profile.photos.large == null ? user : props.profile.photos.large}/>\r\n                        <input className={s.input} type=\"file\" id=\"file\" onChange={onMainPhotoSelected}/>\r\n\r\n                        {editMode ? <ProfileDataForm initialValues={props.profile} profile={props.profile}\r\n                                                     onSubmit = {onSubmit}/>\r\n                        : <ProfileData status={props.status}\r\n                                          updateStatus={props.updateStatus}\r\n                                          profile={props.profile}\r\n                                          isOwner={props.isOwner}\r\n                                          goToEditMode={() => {\r\n                                              setEditMode(true)\r\n                                          }}/>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = (props) => {\r\n    return (\r\n        <ul className={s.des}>\r\n            <li>{\"Имя:  \" + props.profile.fullName}</li>\r\n            <li>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </li>\r\n            <li>\r\n                {\"Работа: \" + (!props.profile.lookingForAJob ? \"Нет\" : props.profile.lookingForAJob)}\r\n            </li>\r\n            <li>\r\n                {\"Мои скиллы: \" + (!props.profile.lookingForAJobDescription ? \"Нет\" : props.profile.lookingForAJobDescription)}\r\n            </li>\r\n            <li>\r\n                {\"Обо мне: \" + (!props.profile.aboutMe ? \"Нет\" : props.profile.aboutMe)}\r\n            </li>\r\n            <li>\r\n                {(Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n                }))}\r\n            </li>\r\n            {props.isOwner && <button onClick={props.goToEditMode}>Изменить</button>}\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst Contact =(props) => {\r\n    return <div>{props.contactTitle}: {props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img className={s.img} src=\"https://klike.net/uploads/posts/2018-05/1525256972_15.jpg\" alt=\"\"/>\r\n                { props.message }\r\n                <div>\r\n                    <button className={s.button} href=\"#\" /*onClick={likeCount}*/>\r\n                        ❤\r\n                        {props.like}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FromsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo( props => {\r\n    let newPostElement = React.createRef();\r\n\r\n    let postsElement = props.post.map(p => (\r\n        <Post message={p.message} like={p.like}/>\r\n    ));\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.MyPost}>\r\n            <div>\r\n                Мои Записи\r\n            </div>\r\n            <MyPostReduxForm onSubmit={onAddPost}/>\r\n            {postsElement}\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength = maxLengthCreator(30);\r\n\r\nconst MyPostForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field validate={[required, maxLength]}\r\n                       placeholder={\"post message\"}\r\n                       component={Textarea} name={\"newPostText\"}\r\n                       className={s.textarea} />\r\n                <div>\r\n                    <button className={s.click} href=\"#\">Добавить</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm ({form: \"ProfileForm\"}) (MyPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        post: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport default  compose (connect (mapStateToProps, mapDispatchToProps)) (MyPosts)","import React, { useState, useEffect } from \"react\";\r\nimport ProfileInfo from \"./profileinfo/profileinfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Profile = (props) => {\r\n  const [profile, setProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  //аналог записи mapState\r\n  const me = useSelector((state) => state.auth);\r\n  // const mapStateToProps = (state) => {\r\n  //   return {\r\n  //     me: state.auth\r\n  //   }\r\n  // }\r\n  //\r\n  const userId = props.match.params.userId;\r\n  const checker = me && me !== null && props.profile ? true : false;\r\n  useEffect(() => {\r\n    //установка юзера\r\n    if (checker && me.userId !== props.profile.userId) {\r\n      setProfile(props.profile);\r\n      setLoading(false);\r\n    }\r\n    //\r\n    //установка моего\r\n    else if (checker && !userId && me.userId) {\r\n      setProfile(props.profile);\r\n      setLoading(false);\r\n    }\r\n    //\r\n    return () => {\r\n      setProfile(null);\r\n      setLoading(false);\r\n    };\r\n  }, [props.profile]);\r\n  if (loading) {\r\n    return \"\";\r\n  }\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./profile\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            // check this section code and refactor\r\n            userId = this.props.AuthUserId\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus (userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n        this.refreshProfile();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner = {!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status = {this.props.status}\r\n                     updateStatus ={this.props.updateStatus}\r\n                     savePhoto = {this.props.savePhoto}\r\n                     \r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    AuthUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter, withAuthRedirect\r\n) (ProfileContainer)\r\n"],"sourceRoot":""}